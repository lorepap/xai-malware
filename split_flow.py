from heifip.extractor import FIPExtractor
from heifip.layers import PacketProcessorType
from heifip.images.flow import FlowImage
from scapy.all import *
import numpy as np 
import os
import json

import configparser
import torch 
from torchvision import transforms
from torch.utils.data import DataLoader
from ut import BalanceSet
from PIL import Image
import os
import configparser
import torch 
import numpy as np 
from torchvision import transforms
from torch.utils.data import DataLoader
from cnn import Network
from ut import GiveMeSampleSize, BalanceSet
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import plotly.graph_objects as go
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import plotly.io as pio
import configparser
from torcheval.metrics.functional import multiclass_f1_score
import cv2 as cv

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tqdm import tqdm

# torch.cuda.get_device_name(0), torch.cuda.is_available()
# device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# # preprocessing

# config = configparser.ConfigParser()
# config.read('con.ini')

# train_folder = config['AAA']['train_folder']
# test_folder = config['AAA']['test_folder']
# in_ch=int(config['AAA']['in_ch'])
# out_ss=len(os.listdir(train_folder))
# N_EPOCHS = int(config['AAA']['num_epoch'])
# N = int(config['AAA']['N'])
# BATCH_SIZE = int(config['AAA']['BATCH_SIZE'])
# ss = int(config['AAA']['SS'])
# drop = float(config['AAA']['DROP'])

# # Model files
# path_to_models = os.path.join('FINAL_MODEL_set_8class')
# cnn_diff = os.path.join(path_to_models, 'DIFF_60.pth')
# cnn_gan = os.path.join(path_to_models, 'GAN_60.pth')
# cnn_real = os.path.join(path_to_models, '16_with_dropout.pth')
# # models = [cnn_diff, cnn_gan, cnn_real]

# # Labels
# label_mapping = {
#     'Backdoor_attack': 0,
#     'DDoS_HTTP_Flood_Attacks': 1,
#     'NET': 2,
#     'Port_Scanning_attack': 3,
#     'Ransomware_attack': 4,#-- 
#     'SQL_injection_attack': 5,
#     'Uploading_attack': 6,#--
#     'Vulnerability_scanner_attack': 7
# }

# # The test set
# transform =  transforms.Compose(
#             [transforms.ToTensor(),transforms.Grayscale(num_output_channels=1), transforms.Normalize((0.5), (1))])
# test = BalanceSet(root_path=test_folder, transform=transform, N = 400, label_mapping=label_mapping)

# attack_folders = os.listdir(test_folder)
# attack_imgs = {}

# for a in attack_folders:
#     attack_imgs[a] = []

# # Let's split the images for each attack
# for f in test.image_paths:
#     if f.split('/')[-2] in attack_folders:
#         attack_imgs[f.split('/')[-2]].append(f)

# # The models under test
# models = ['DIFF_50.pth', 'GAN_50.pth', '16_with_dropout.pth']

# # assert reproducible random number generation
# seed = 1
# np.random.seed(seed)
# torch.manual_seed(seed)

# for a in attack_folders:
#     print(a)

# Generate flow splitting if not already done
def split_pcap_by_flow(pcap_file, directory):
    # Read pcap file
    packets = rdpcap(pcap_file)
    
    # Dictionary to hold packets per flow
    flows = {}

    # Iterate through each packet and classify by flow
    for packet in tqdm(packets):
        if IP in packet:
            if TCP in packet:
                flow_key = ("TCP", packet[IP].src, packet[TCP].sport, packet[IP].dst, packet[TCP].dport)
                '''elif UDP in packet:
                flow_key = ("UDP", packet[IP].src, packet[UDP].sport, packet[IP].dst, packet[UDP].dport)
            elif packet[IP].proto==2:
                flow_key = ("IGMP", packet[IP].src, "ICMP", packet[IP].dst, "ICMP")
            elif packet[IP].proto==1:
                flow_key = ("ICMP", packet[IP].src, "ICMP", packet[IP].dst, "ICMP")
            elif packet.haslayer(DNS):
                flow_key = ("DNS", packet[IP].src, packet[IP].sport, packet[IP].dst, packet[IP].dport)
            elif packet.haslayer(HTTP):
                flow_key = ("HTTP", packet[IP].src, packet[IP].sport, packet[IP].dst, packet[IP].dport)'''
            else:
                continue
        elif IPv6 in packet:
            if TCP in packet:
                flow_key = ("TCP", packet[IPv6].src, packet[TCP].sport, packet[IPv6].dst, packet[TCP].dport)
                '''elif UDP in packet:
                flow_key = ("UDP", packet[IPv6].src, packet[UDP].sport, packet[IPv6].dst, packet[UDP].dport)
            elif 'ICMPv6' in packet[IPv6].summary():
                flow_key = ("ICMPv6", packet[IPv6].src, "ICMPv6", packet[IPv6].dst, "ICMPv6")
            elif packet.haslayer(DNS):
                flow_key = ("DNS", packet[IPv6].src, packet[IPv6].sport, packet[IPv6].dst, packet[IPv6].dport)
            elif packet.haslayer(HTTP):
                flow_key = ("HTTP", packet[IPv6].src, packet[IPv6].sport, packet[IPv6].dst, packet[IPv6].dport)'''
            else:
                continue
            
        else:
            continue

        if flow_key not in flows:
            flows[flow_key] = [packet]
        else:
            flows[flow_key].append(packet)
        
    # Write packets per flow to separate pcap files
    for flow_key, flow_packets in tqdm(flows.items()):
        protocol, src_ip, src_port, dst_ip, dst_port = flow_key
        
        if not os.path.exists(directory):
            
            os.makedirs(directory)
            print(f"Directory '{directory}' created successfully.")
            if len(flow_key) == 4:
                flow_filename = f"{directory}/flow_{protocol}_{src_ip}_{src_port}_{dst_ip}_{dst_port}.pcap"
            else:
                flow_filename = f"{directory}/flow_{protocol}_{src_ip}_{src_port}_{dst_ip}_{dst_port}.pcap"
        else:
            print(f"Directory '{directory}' already exists.")
            if len(flow_key) == 4:
                flow_filename = f"{directory}/flow_{protocol}_{src_ip}_{src_port}_{dst_ip}_{dst_port}.pcap"
            else:
                flow_filename = f"{directory}/flow_{protocol}_{src_ip}_{src_port}_{dst_ip}_{dst_port}.pcap"

        wrpcap(flow_filename, flow_packets)

    print("Splitting complete.")

for attack in os.listdir('/home/ubuntu/xai/data/pcap/Edge-IIoTset dataset/Attack traffic'):
    if attack.endswith('.pcap'):
        attack_dir = attack.replace('.pcap', '')
        if not os.path.exists(f'/home/ubuntu/xai/data/pcap/Edge-IIoTset dataset/flows/{attack_dir}'):
            print(f"Splitting {attack}...")
            split_pcap_by_flow(f'/home/ubuntu/xai/data/pcap/Edge-IIoTset dataset/Attack traffic/{attack}', f'/home/ubuntu/xai/data/pcap/Edge-IIoTset dataset/flows/{attack_dir}')