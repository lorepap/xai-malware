from torchvision.models import resnet50, ResNet50_Weights
import torch.nn.functional as F
from cnn import Network
import torch.nn as nn
from torchvision.models import resnet50, ResNet50_Weights

# GradCamModel class with a ResNet pretrained model
class GradCamModel(nn.Module):
    def __init__(self, model):
        super(GradCamModel, self).__init__()
        
        # define the resnet50
        # self.resnet = resnet50(pretrained=True)
        # self.resnet = resnet50(weights=ResNet50_Weights.DEFAULT)
    
        self.cnn: Network = model

        # isolate the feature blocks 
        # self.features = nn.Sequential(self.resnet.conv1,
        #                               self.resnet.bn1,
        #                               self.resnet.relu,
        #                               self.resnet.maxpool, 
        #                               self.resnet.layer1, 
        #                               self.resnet.layer2, 
        #                               self.resnet.layer3, 
        #                               self.resnet.layer4)
    
        device = next(model.parameters()).device  # Get the device of the input model

        self.features = nn.Sequential(
            self.cnn.conv1,
            nn.ReLU(),
            self.cnn.conv2,
            nn.ReLU(),
            self.cnn.bn1,
            self.cnn.conv3,
            nn.ReLU(),
            self.cnn.dropout
        ).to(device)

        self.fc_layers = nn.Sequential(
            self.cnn.fc1,
            nn.ReLU(),
            self.cnn.fc2,
            nn.ReLU()
        ).to(device)

        # classifier
        self.classifier = self.cnn.fc3.to(device) # Not sure if this is the classifier

        # gradient placeholder
        self.gradient = None
    
    # hook for the gradients
    def activations_hook(self, grad):
        self.gradient = grad
    
    def get_gradient(self):
        return self.gradient
    
    def get_activations(self, x):
        x =  x.view(x.shape[0], 1, x.shape[2]*x.shape[3])
        return self.features(x)
    
    def forward(self, x):

        x =  x.view(x.shape[0], 1, x.shape[2]*x.shape[3])
        x = self.features(x)

        h = x.register_hook(self.activations_hook)

        x = x.reshape(x.shape[0], -1)

        x = self.fc_layers(x)

        x = self.classifier(x)
        return x

